[
    {
        "id": "4574a4f87d40f0fa",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4d767754efb0e8b5",
        "type": "inject",
        "z": "4574a4f87d40f0fa",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 180,
        "wires": [
            [
                "9cde2eb8f84cc47b"
            ]
        ]
    },
    {
        "id": "24b74142277ac0e3",
        "type": "debug",
        "z": "4574a4f87d40f0fa",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 360,
        "wires": []
    },
    {
        "id": "9cde2eb8f84cc47b",
        "type": "function",
        "z": "4574a4f87d40f0fa",
        "name": "function 1",
        "func": "// --- CONFIGURACIÓN ---\nconst timestamp = new Date().toISOString();\nconst groups = [1, 2]; // dos grupos (batería + inversor)\n\n// --- Almacenamiento persistente de SOC en contexto ---\n// (permite que el valor se mantenga entre ejecuciones del flujo)\nlet socValues = context.get(\"socValues\") || {};\n\n// Si no existen, inicializa valores SOC fijos por grupo\nfor (const g of groups) {\n    if (socValues[g] === undefined) {\n        socValues[g] = Math.floor(Math.random() * (100 - 60) + 60); // fijo entre 60% y 100%\n    }\n}\ncontext.set(\"socValues\", socValues);\n\n// Función auxiliar\nfunction random(min, max, decimals = 2) {\n    return parseFloat((Math.random() * (max - min) + min).toFixed(decimals));\n}\n\n// --- BESS ---\nconst bess = {\n    id: 1,\n    timestamp,\n    ac_current_in: random(0, 100),\n    ac_current_out: random(0, 100),\n    operation_mode: Math.random() > 0.5 ? \"on_grid\" : \"off_grid\"\n};\n\n// --- BATTERY ---\nconst batteries = groups.map(group_id => ({\n    id: group_id,\n    group_id,\n    timestamp,\n    soc: socValues[group_id], // valor fijo\n    current: random(-50, 50),\n    voltage: random(350, 420)\n}));\n\n// --- PCS ---\nconst pcsUnits = groups.map(group_id => ({\n    id: group_id,\n    group_id,\n    timestamp,\n    dc_voltage: random(350, 420),\n    dc_current: random(-50, 50),\n    ac_voltage: random(220, 240),\n    ac_current: random(0, 100)\n}));\n\n// --- MQTT Topics ---\n// bess/<id>/status\n// battery/<group_id>/status\n// pcs/<group_id>/status\nconst msgs = [];\n\nmsgs.push({\n    topic: `bess/${bess.id}/status`,\n    payload: bess\n});\n\nfor (const b of batteries) {\n    msgs.push({\n        topic: `battery/${b.group_id}/status`,\n        payload: b\n    });\n}\n\nfor (const p of pcsUnits) {\n    msgs.push({\n        topic: `pcs/${p.group_id}/status`,\n        payload: p\n    });\n}\n\nreturn [msgs];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "24b74142277ac0e3"
            ]
        ]
    }
]